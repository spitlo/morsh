#!/usr/bin/env bash
# shellcheck disable=SC2034,SC2018,SC2019
set -e

# Colors
BLUE='\033[1;34m'
BROWN='\033[0;33m'
GREEN='\033[1;32m'
NC='\033[0m'
RED='\033[0;31m'
YELLOW='\033[1;33m'

# Defaults
MODE=""
ALPHABET_PAN="nato"
ALPHABET_PAE="english"
ALPHABET_PAA="american"
ALPHABET_PAI="italian"
ALPHABET_PAG="german"
ALPHABET_PAL="international"
ALPHABET="morse"
SETS_DIR=$( cd "$( dirname "$(readlink "$0" || echo "$0")" )/sets" && pwd )

USAGE="
${BROWN}Usage${NC}: morsh [ARGUMENTS] [FILE|STRING]
Encode/decode morse code.
There are three ways to supply input text to this script:
  ${GREEN}1${NC}) Add a file as argument
  ${GREEN}2${NC}) Add word or words as arguments
  ${GREEN}3${NC}) Pipe text to it
In case 2, the script tries to guess the relevant mode, in other cases specify mode with a flag (see below).

${BROWN}Options${NC}:
  [--encode/-e]       Force encode.
  [--decode/-d]       Force decode.
"
HELP="
${BROWN}Usage examples${NC}:
  Quickly decode a message from some ancient online puzzle game:
  \$ ${BLUE}./morsh ...- --- --- -.. --- --- / -- .- --. .. -.-.${NC}

  Awkwardly uppercase a sentence (removing punctuation, diacritics and fluff in the process):
  \$ ${BLUE}echo \"I Have No Mouth, and I Must Scream\" | ./morsh -e | ./morsh -d${NC}

  Turn Crime and Punishment into something you can reliably broadcast to your entire neighborhood with a simple signal horn and some patience:
  \$ ${BLUE}curl https://gutenberg.org/files/2554/2554-0.txt | ./morsh --encode | less${NC}
"

# A place to store unfinished words in morse
buffer=""
# Keep track of progress
is_first_line="yes"

function guess_mode() {
  # If MODE is still unset, try to guess if we should encode or decode text
  line="$1"
  if [ -z "$MODE" ]; then
    if [ ${#line} == 0 ]; then
      echo -e "${RED}Error.${NC}\nCould not guess mode. Please supply an argument (${BLUE}-d${NC}/${BLUE}-e${NC})."
      exit 1
    fi
    dash_removed=${line//-}
    # Bash doesn’t handle decimals, multiply by 100 for better precision
    # shellcheck disable=SC2017
    diff=$(( ${#dash_removed} * 100 / ${#line} * 100 ))
    if [ "$diff" -gt 8000 ]; then
      MODE="encode"
    else
      MODE="decode"
    fi
  fi
}

function clean_line() {
  local accents="āáǎàåäēéěèīíǐìïōóǒòöūúǔùǖǘǚǜüçñĀÁǍÀÅÄĒÉĚÈĪÍǏÌŌÓǑÒÖŪÚǓÙǕǗǙǛÜÇÑ"
  local nonaccs="AAAAAAEEEEIIIIIOOOOOUUUUUUUUUCN"
  line="$1"
  if [ "$MODE" == "encode" ]; then
    # Remove some diacritics. This in not perfect, but we can’t rely on iconv
    # Uppercase the result while we’re at it.
    echo "$line" | tr "$accents" "$nonaccs$nonaccs"
  else
    # Normalize morse code syntax
    echo "$line" | tr '*' '.'
  fi
}

function handle_code_character() {
  code_character="$1"
  # Do this until we find a better way
  # echo "Checking morse character $code_character"
  for alpha_character in {A..Z}; do
    if [ "${!alpha_character}" == "$code_character" ]; then
      echo -n "$alpha_character"
    fi
  done
  if [ "$ALPHABET" == "morse" ]; then
    for num_character in {0..9}; do
      num_character_name="_$num_character"
      if [ "${!num_character_name}" == "$code_character" ]; then
        echo -n "$num_character"
      fi
    done
  else
    echo -n "$code_character"
  fi
}

function handle_character() {
  character="$1"
  case "$character" in
    ""|" ")
      # Don’t ask me why, but spaces come through as ""
      if [ "$MODE" == "encode" ]; then
        echo -n "/ "
      else
        handle_code_character "$buffer"
        buffer=""
      fi
      ;;
    [a-zA-Z])
      # This is a character that can be easily encoded
      character=$(echo "$character" | tr a-z A-Z)
      morse_code="${!character}"
      echo -n "$morse_code "
      ;;
    [0-9])
      # This is a character that can be encoded
      character_name="_$character"
      morse_code="${!character_name}"
      echo -n "$morse_code "
      ;;
    [-.])
      # This possibly is a morse code letter
      if [ "$MODE" == "decode" ]; then
        buffer="$buffer$character"
      fi
      ;;
    "/")
      if [ "$MODE" == "decode" ]; then
        echo -n " "
      fi
      ;;
    *)
      # This is one of the characters we don’t transform, print nothing?
      echo -n " "
      ;;
  esac
}

function handle_line() {
  line="$1"
  if [ "$is_first_line" == "yes" ]; then
    is_first_line="no"
    guess_mode "$line"
  fi

  line=$(clean_line "$1")

  while read -rn1 character; do
    handle_character "$character"
  done < <(echo "$line")
  echo
}

argument=""

# Handle args
for arg in "$@"; do
  if [ "$arg" = "-d" ] || [ "$arg" = "--decode" ]; then
    MODE="decode"
  elif [ "$arg" = "-e" ] || [ "$arg" = "--encode" ]; then
    MODE="encode"
  elif [ "$arg" = "--pan" ] || [ "$arg" = "--pae" ] || [ "$arg" = "--paa" ] \
    || [ "$arg" = "--pai" ] || [ "$arg" = "--pag" ] || [ "$arg" = "--pal" ]; then
    case "$arg" in
    "--pae")
      ALPHABET="$ALPHABET_PAE"
      ;;
    "--paa")
      ALPHABET="$ALPHABET_PAA"
      ;;
    "--pai")
      ALPHABET="$ALPHABET_PAI"
      ;;
    "--pag")
      ALPHABET="$ALPHABET_PAG"
      ;;
    "--pal")
      ALPHABET="$ALPHABET_PAL"
      ;;
    *)
      ALPHABET="$ALPHABET_PAN"
      ;;
    esac
  elif [ "$arg" = "help" ] || [ "$arg" = "--help" ] || [ "$arg" = "-h" ]; then
    echo -e "$USAGE$HELP"
    exit 0
  else
    # Concatenating this to existing string instead of simply setting it allows us to
    # accept unquoted sentences as arguments.
    argument="$argument $arg"
  fi
done

# Load the correct set of characters
case "$ALPHABET" in
  "nato")
    # shellcheck source=/dev/null
    source "$SETS_DIR/nato.set"
    ;;
  "english")
    # shellcheck source=/dev/null
    source "$SETS_DIR/english.set"
    ;;
  "american")
    # shellcheck source=/dev/null
    source "$SETS_DIR/american.set"
    ;;
  "italian")
    # shellcheck source=/dev/null
    source "$SETS_DIR/italian.set"
    ;;
  "german")
    # shellcheck source=/dev/null
    source "$SETS_DIR/german.set"
    ;;
  "international")
    # shellcheck source=/dev/null
    source "$SETS_DIR/international.set"
    ;;
  *)
    # shellcheck source=/dev/null
    source "$SETS_DIR/morse.set"
    ;;
esac

# Check if input is piped; if so read it character for character. If not,
# see if argument supplied is a file and read it character for character.
# If neither of these are true, assume the argument is a string of text.
if [ -t 0 ]; then
  trimmed_arguments="${argument// }"
  # If no arguments are supplied, print help and exit
  if [ "$trimmed_arguments" = "" ]; then
    echo -e "$USAGE"
    exit 0
  fi
  if [ -f "$trimmed_arguments" ]; then
    while read -re line; do
      handle_line "$line"
    done < <(cat "$trimmed_arguments")
  else
    # Last try: Assume this is a string
    while read -re line; do
      handle_line "$line"
    done < <(echo "$argument")
  fi
else
  while IFS= read -re line; do
    handle_line "$line"
  done
fi
